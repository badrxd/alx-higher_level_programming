==============================
Text of  2-matrix_divided.py
==============================

This module its defines a matrix division function ``matrix_divided(matrix, div)``.

The Usage
=========

``matrix_divided()`` returns new matrix , a copy of the parameter
``matrix`` with all elements divided by ``div``.

::

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix = [
    ...     [1, 2, 3],
    ...     [6, 5, 4]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, 0.67, 1.0], [2.0, 1.67, 1.33]]

Note that quotients are rounded to a maximum of two decimal places.

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

The original matrix was left unchanged.

::

    >>> print(matrix)
    [[1, 2, 3], [4, 5, 6]]

The function also can handle floating-point numbers.

::

    >>> matrix = [
    ...     [5.5, 2.5, 4.1],
    ...     [6.5, 5.5, 3.6]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    [[1.83, 0.83, 1.37], [2.17, 1.83, 1.2]]

Integers and floats can be combined together.

::

    >>> matrix = [
    ...     [1, -2.3, 3.2, 4.5, 5.6],
    ...     [-9.6, 11.00, 9.5, 8.999, 11]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, -0.77, 1.07, 1.5, 1.87], [-3.2, 3.67, 3.17, 3.0, 3.67]]

Invalid Matrices
==============

The parameter ``matrix`` must be a list of lists consisting, ints or
floats. If ``matrix`` is not a list, a TypeError will be raised.

::

    >>> matrix = "some text"
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

::

    >>> matrix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Note that an empty list will raise the TypeError tow.

::

    >>> matrix = []
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

But an empty list of lists will not raise error.

::

    >>> matrix = [[]]
    >>> print(matrix_divided(matrix, 3))
    [[]]

An identical TypeError is raised if ``matrix`` is not specifically a list of
lists.

::

    >>> matrix = [1, 2, 3]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

The same TypeError is raised yet again if any elements in ``matrix`` are
neither ints nor floats.

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     ["text", 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats


Finally, all the rows in ``matrix`` must be the same size. If any rows are
of different sizes, a new TypeError will be raised.

::

    >>> matrix = [
    ...     [1, 2, 3, 4],
    ...     [5, 6, 7, 8, 9]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

Invalid divisors
================

The parameter ``div`` must be either an int or float. if not, a TypeError
will be raised.

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, "text"))
    Traceback (most recent call last):
    TypeError: div must be a number

::

    >>> print(matrix_divided(matrix, None))
    Traceback (most recent call last):
    TypeError: div must be a number

``div`` must also be non-zero. or, a ZeroDivisionError will be raised.

::

    >>> print(matrix_divided(matrix, 0))
    Traceback (most recent call last):
    ZeroDivisionError: division by zero
