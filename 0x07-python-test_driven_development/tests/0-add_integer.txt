============================
 How to Use 0-add_integer.py
============================

This module defines an integer addition function ``add_integer(a, b=98)``.

Number
======
``add_integer(a, b=98)`` returns the addition of its two arguments of numbers type int.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(1, 2)
    3

::

    >>> add_integer(100, -2)
    98

::

    >>> add_integer(2)
    100

::

    >>> add_integer(100.3, -2)
    98

::

    >>> add_integer(-3, -2)
    -5

::

    >>> add_integer(-9.5, -2.9)
    -11

::

Non-Numbers
===========

``add_integer()`` expects that both arguments are integers or floats.
If any argument is a non-integer and non-float, a TypeError is raised:

::

    >>> add_integer(4, "School")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer("School", 4)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(9.5, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer("text", "text")
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
